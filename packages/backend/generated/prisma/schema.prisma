generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pg_trgm, btree_gin]
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  username     String   @unique
  passwordHash String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  devices      Device[]
  sessions     Session[]
  participants Participant[]
  messages     Message[]     @relation("MessageSender")

  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@map("users")
}

model Device {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  deviceFingerprint String   @unique
  pqPubKey          Bytes
  pqSignPubKey      Bytes
  createdAt         DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]
  messages Message[]

  @@index([userId])
  @@index([deviceFingerprint])
  @@map("devices")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  deviceId  String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  device        Device         @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model RefreshToken {
  id          String   @id @default(uuid()) @db.Uuid
  sessionId   String?  @db.Uuid
  hashedToken String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([hashedToken])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Conversation {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  isGroup       Boolean   @default(false)
  lastMessageAt DateTime?
  messageCount  Int       @default(0)
  activeMembers Int       @default(0)

  isArchived Boolean   @default(false)
  archivedAt DateTime?

  participants Participant[]
  messages     Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isGroup, lastMessageAt])
  @@index([isArchived])
  @@map("conversations")
}

model Participant {
  id             String   @id @default(uuid()) @db.Uuid
  conversationId String   @db.Uuid
  userId         String   @db.Uuid
  joinedAt       DateTime @default(now())

  lastReadAt DateTime?
  isMuted    Boolean   @default(false)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("participants")
}

model Message {
  id String @id @default(uuid())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.Uuid
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  senderId       String       @db.Uuid
  device         Device       @relation(fields: [deviceId], references: [id])
  deviceId       String       @db.Uuid

  encryptedBody Bytes
  pqSignature   Bytes?

  messageType MessageType @default(TEXT)
  sentAt      DateTime    @default(now())
  isDelivered Boolean     @default(false)
  deliveredAt DateTime?
  isRead      Boolean     @default(false)
  readAt      DateTime?

  parentMessageId String?
  parentMessage   Message?  @relation("MessageThread", fields: [parentMessageId], references: [id])
  replies         Message[] @relation("MessageThread")

  @@index([conversationId, sentAt(sort: Desc)])
  @@index([senderId])
  @@index([deviceId])
  @@index([conversationId, isRead])
  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
}
